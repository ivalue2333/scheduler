// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                 = new(Query)
	SchedulerInstance *schedulerInstance
	SchedulerLocker   *schedulerLocker
	SchedulerTask     *schedulerTask
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	SchedulerInstance = &Q.SchedulerInstance
	SchedulerLocker = &Q.SchedulerLocker
	SchedulerTask = &Q.SchedulerTask
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                db,
		SchedulerInstance: newSchedulerInstance(db, opts...),
		SchedulerLocker:   newSchedulerLocker(db, opts...),
		SchedulerTask:     newSchedulerTask(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	SchedulerInstance schedulerInstance
	SchedulerLocker   schedulerLocker
	SchedulerTask     schedulerTask
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		SchedulerInstance: q.SchedulerInstance.clone(db),
		SchedulerLocker:   q.SchedulerLocker.clone(db),
		SchedulerTask:     q.SchedulerTask.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		SchedulerInstance: q.SchedulerInstance.replaceDB(db),
		SchedulerLocker:   q.SchedulerLocker.replaceDB(db),
		SchedulerTask:     q.SchedulerTask.replaceDB(db),
	}
}

type queryCtx struct {
	SchedulerInstance ISchedulerInstanceDo
	SchedulerLocker   ISchedulerLockerDo
	SchedulerTask     ISchedulerTaskDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		SchedulerInstance: q.SchedulerInstance.WithContext(ctx),
		SchedulerLocker:   q.SchedulerLocker.WithContext(ctx),
		SchedulerTask:     q.SchedulerTask.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
