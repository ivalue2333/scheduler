// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ivalue2333/scheduler/dal/rdm"
)

func newSchedulerLocker(db *gorm.DB, opts ...gen.DOOption) schedulerLocker {
	_schedulerLocker := schedulerLocker{}

	_schedulerLocker.schedulerLockerDo.UseDB(db, opts...)
	_schedulerLocker.schedulerLockerDo.UseModel(&rdm.SchedulerLocker{})

	tableName := _schedulerLocker.schedulerLockerDo.TableName()
	_schedulerLocker.ALL = field.NewAsterisk(tableName)
	_schedulerLocker.ID = field.NewInt64(tableName, "id")
	_schedulerLocker.Key = field.NewString(tableName, "key")
	_schedulerLocker.InstanceID = field.NewInt64(tableName, "instance_id")
	_schedulerLocker.CreatedAt = field.NewTime(tableName, "created_at")
	_schedulerLocker.UpdatedAt = field.NewTime(tableName, "updated_at")

	_schedulerLocker.fillFieldMap()

	return _schedulerLocker
}

// schedulerLocker 调度 locker 存储
type schedulerLocker struct {
	schedulerLockerDo

	ALL        field.Asterisk
	ID         field.Int64  // 主键
	Key        field.String // 存储的 key
	InstanceID field.Int64  // instance 主键
	CreatedAt  field.Time   // 创建时间
	UpdatedAt  field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (s schedulerLocker) Table(newTableName string) *schedulerLocker {
	s.schedulerLockerDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s schedulerLocker) As(alias string) *schedulerLocker {
	s.schedulerLockerDo.DO = *(s.schedulerLockerDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *schedulerLocker) updateTableName(table string) *schedulerLocker {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Key = field.NewString(table, "key")
	s.InstanceID = field.NewInt64(table, "instance_id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *schedulerLocker) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *schedulerLocker) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["key"] = s.Key
	s.fieldMap["instance_id"] = s.InstanceID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s schedulerLocker) clone(db *gorm.DB) schedulerLocker {
	s.schedulerLockerDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s schedulerLocker) replaceDB(db *gorm.DB) schedulerLocker {
	s.schedulerLockerDo.ReplaceDB(db)
	return s
}

type schedulerLockerDo struct{ gen.DO }

type ISchedulerLockerDo interface {
	gen.SubQuery
	Debug() ISchedulerLockerDo
	WithContext(ctx context.Context) ISchedulerLockerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISchedulerLockerDo
	WriteDB() ISchedulerLockerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISchedulerLockerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISchedulerLockerDo
	Not(conds ...gen.Condition) ISchedulerLockerDo
	Or(conds ...gen.Condition) ISchedulerLockerDo
	Select(conds ...field.Expr) ISchedulerLockerDo
	Where(conds ...gen.Condition) ISchedulerLockerDo
	Order(conds ...field.Expr) ISchedulerLockerDo
	Distinct(cols ...field.Expr) ISchedulerLockerDo
	Omit(cols ...field.Expr) ISchedulerLockerDo
	Join(table schema.Tabler, on ...field.Expr) ISchedulerLockerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISchedulerLockerDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISchedulerLockerDo
	Group(cols ...field.Expr) ISchedulerLockerDo
	Having(conds ...gen.Condition) ISchedulerLockerDo
	Limit(limit int) ISchedulerLockerDo
	Offset(offset int) ISchedulerLockerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISchedulerLockerDo
	Unscoped() ISchedulerLockerDo
	Create(values ...*rdm.SchedulerLocker) error
	CreateInBatches(values []*rdm.SchedulerLocker, batchSize int) error
	Save(values ...*rdm.SchedulerLocker) error
	First() (*rdm.SchedulerLocker, error)
	Take() (*rdm.SchedulerLocker, error)
	Last() (*rdm.SchedulerLocker, error)
	Find() ([]*rdm.SchedulerLocker, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*rdm.SchedulerLocker, err error)
	FindInBatches(result *[]*rdm.SchedulerLocker, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*rdm.SchedulerLocker) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISchedulerLockerDo
	Assign(attrs ...field.AssignExpr) ISchedulerLockerDo
	Joins(fields ...field.RelationField) ISchedulerLockerDo
	Preload(fields ...field.RelationField) ISchedulerLockerDo
	FirstOrInit() (*rdm.SchedulerLocker, error)
	FirstOrCreate() (*rdm.SchedulerLocker, error)
	FindByPage(offset int, limit int) (result []*rdm.SchedulerLocker, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISchedulerLockerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetLockInstance(key string) (result *rdm.SchedulerLocker, err error)
	DeleteLockInstance(key string) (result *rdm.SchedulerLocker, err error)
}

// select * from @@table
//
//	where key = @key limit 1;
func (s schedulerLockerDo) GetLockInstance(key string) (result *rdm.SchedulerLocker, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, key)
	generateSQL.WriteString("select * from scheduler_locker where key = ? limit 1; ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// delete from @@table
//
//	where key = @key limit 1;
func (s schedulerLockerDo) DeleteLockInstance(key string) (result *rdm.SchedulerLocker, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, key)
	generateSQL.WriteString("delete from scheduler_locker where key = ? limit 1; ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s schedulerLockerDo) Debug() ISchedulerLockerDo {
	return s.withDO(s.DO.Debug())
}

func (s schedulerLockerDo) WithContext(ctx context.Context) ISchedulerLockerDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s schedulerLockerDo) ReadDB() ISchedulerLockerDo {
	return s.Clauses(dbresolver.Read)
}

func (s schedulerLockerDo) WriteDB() ISchedulerLockerDo {
	return s.Clauses(dbresolver.Write)
}

func (s schedulerLockerDo) Session(config *gorm.Session) ISchedulerLockerDo {
	return s.withDO(s.DO.Session(config))
}

func (s schedulerLockerDo) Clauses(conds ...clause.Expression) ISchedulerLockerDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s schedulerLockerDo) Returning(value interface{}, columns ...string) ISchedulerLockerDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s schedulerLockerDo) Not(conds ...gen.Condition) ISchedulerLockerDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s schedulerLockerDo) Or(conds ...gen.Condition) ISchedulerLockerDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s schedulerLockerDo) Select(conds ...field.Expr) ISchedulerLockerDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s schedulerLockerDo) Where(conds ...gen.Condition) ISchedulerLockerDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s schedulerLockerDo) Order(conds ...field.Expr) ISchedulerLockerDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s schedulerLockerDo) Distinct(cols ...field.Expr) ISchedulerLockerDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s schedulerLockerDo) Omit(cols ...field.Expr) ISchedulerLockerDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s schedulerLockerDo) Join(table schema.Tabler, on ...field.Expr) ISchedulerLockerDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s schedulerLockerDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISchedulerLockerDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s schedulerLockerDo) RightJoin(table schema.Tabler, on ...field.Expr) ISchedulerLockerDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s schedulerLockerDo) Group(cols ...field.Expr) ISchedulerLockerDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s schedulerLockerDo) Having(conds ...gen.Condition) ISchedulerLockerDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s schedulerLockerDo) Limit(limit int) ISchedulerLockerDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s schedulerLockerDo) Offset(offset int) ISchedulerLockerDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s schedulerLockerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISchedulerLockerDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s schedulerLockerDo) Unscoped() ISchedulerLockerDo {
	return s.withDO(s.DO.Unscoped())
}

func (s schedulerLockerDo) Create(values ...*rdm.SchedulerLocker) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s schedulerLockerDo) CreateInBatches(values []*rdm.SchedulerLocker, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s schedulerLockerDo) Save(values ...*rdm.SchedulerLocker) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s schedulerLockerDo) First() (*rdm.SchedulerLocker, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*rdm.SchedulerLocker), nil
	}
}

func (s schedulerLockerDo) Take() (*rdm.SchedulerLocker, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*rdm.SchedulerLocker), nil
	}
}

func (s schedulerLockerDo) Last() (*rdm.SchedulerLocker, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*rdm.SchedulerLocker), nil
	}
}

func (s schedulerLockerDo) Find() ([]*rdm.SchedulerLocker, error) {
	result, err := s.DO.Find()
	return result.([]*rdm.SchedulerLocker), err
}

func (s schedulerLockerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*rdm.SchedulerLocker, err error) {
	buf := make([]*rdm.SchedulerLocker, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s schedulerLockerDo) FindInBatches(result *[]*rdm.SchedulerLocker, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s schedulerLockerDo) Attrs(attrs ...field.AssignExpr) ISchedulerLockerDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s schedulerLockerDo) Assign(attrs ...field.AssignExpr) ISchedulerLockerDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s schedulerLockerDo) Joins(fields ...field.RelationField) ISchedulerLockerDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s schedulerLockerDo) Preload(fields ...field.RelationField) ISchedulerLockerDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s schedulerLockerDo) FirstOrInit() (*rdm.SchedulerLocker, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*rdm.SchedulerLocker), nil
	}
}

func (s schedulerLockerDo) FirstOrCreate() (*rdm.SchedulerLocker, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*rdm.SchedulerLocker), nil
	}
}

func (s schedulerLockerDo) FindByPage(offset int, limit int) (result []*rdm.SchedulerLocker, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s schedulerLockerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s schedulerLockerDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s schedulerLockerDo) Delete(models ...*rdm.SchedulerLocker) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *schedulerLockerDo) withDO(do gen.Dao) *schedulerLockerDo {
	s.DO = *do.(*gen.DO)
	return s
}
