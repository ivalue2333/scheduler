// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ivalue2333/scheduler/dal/rdm"

	"time"
)

func newSchedulerInstance(db *gorm.DB, opts ...gen.DOOption) schedulerInstance {
	_schedulerInstance := schedulerInstance{}

	_schedulerInstance.schedulerInstanceDo.UseDB(db, opts...)
	_schedulerInstance.schedulerInstanceDo.UseModel(&rdm.SchedulerInstance{})

	tableName := _schedulerInstance.schedulerInstanceDo.TableName()
	_schedulerInstance.ALL = field.NewAsterisk(tableName)
	_schedulerInstance.ID = field.NewInt64(tableName, "id")
	_schedulerInstance.HeartBeatAt = field.NewTime(tableName, "heart_beat_at")
	_schedulerInstance.CreatedAt = field.NewTime(tableName, "created_at")

	_schedulerInstance.fillFieldMap()

	return _schedulerInstance
}

// schedulerInstance 调度实例表
type schedulerInstance struct {
	schedulerInstanceDo

	ALL         field.Asterisk
	ID          field.Int64 // 主键
	HeartBeatAt field.Time  // 心跳时间
	CreatedAt   field.Time  // 创建时间

	fieldMap map[string]field.Expr
}

func (s schedulerInstance) Table(newTableName string) *schedulerInstance {
	s.schedulerInstanceDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s schedulerInstance) As(alias string) *schedulerInstance {
	s.schedulerInstanceDo.DO = *(s.schedulerInstanceDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *schedulerInstance) updateTableName(table string) *schedulerInstance {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.HeartBeatAt = field.NewTime(table, "heart_beat_at")
	s.CreatedAt = field.NewTime(table, "created_at")

	s.fillFieldMap()

	return s
}

func (s *schedulerInstance) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *schedulerInstance) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["heart_beat_at"] = s.HeartBeatAt
	s.fieldMap["created_at"] = s.CreatedAt
}

func (s schedulerInstance) clone(db *gorm.DB) schedulerInstance {
	s.schedulerInstanceDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s schedulerInstance) replaceDB(db *gorm.DB) schedulerInstance {
	s.schedulerInstanceDo.ReplaceDB(db)
	return s
}

type schedulerInstanceDo struct{ gen.DO }

type ISchedulerInstanceDo interface {
	gen.SubQuery
	Debug() ISchedulerInstanceDo
	WithContext(ctx context.Context) ISchedulerInstanceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISchedulerInstanceDo
	WriteDB() ISchedulerInstanceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISchedulerInstanceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISchedulerInstanceDo
	Not(conds ...gen.Condition) ISchedulerInstanceDo
	Or(conds ...gen.Condition) ISchedulerInstanceDo
	Select(conds ...field.Expr) ISchedulerInstanceDo
	Where(conds ...gen.Condition) ISchedulerInstanceDo
	Order(conds ...field.Expr) ISchedulerInstanceDo
	Distinct(cols ...field.Expr) ISchedulerInstanceDo
	Omit(cols ...field.Expr) ISchedulerInstanceDo
	Join(table schema.Tabler, on ...field.Expr) ISchedulerInstanceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISchedulerInstanceDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISchedulerInstanceDo
	Group(cols ...field.Expr) ISchedulerInstanceDo
	Having(conds ...gen.Condition) ISchedulerInstanceDo
	Limit(limit int) ISchedulerInstanceDo
	Offset(offset int) ISchedulerInstanceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISchedulerInstanceDo
	Unscoped() ISchedulerInstanceDo
	Create(values ...*rdm.SchedulerInstance) error
	CreateInBatches(values []*rdm.SchedulerInstance, batchSize int) error
	Save(values ...*rdm.SchedulerInstance) error
	First() (*rdm.SchedulerInstance, error)
	Take() (*rdm.SchedulerInstance, error)
	Last() (*rdm.SchedulerInstance, error)
	Find() ([]*rdm.SchedulerInstance, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*rdm.SchedulerInstance, err error)
	FindInBatches(result *[]*rdm.SchedulerInstance, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*rdm.SchedulerInstance) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISchedulerInstanceDo
	Assign(attrs ...field.AssignExpr) ISchedulerInstanceDo
	Joins(fields ...field.RelationField) ISchedulerInstanceDo
	Preload(fields ...field.RelationField) ISchedulerInstanceDo
	FirstOrInit() (*rdm.SchedulerInstance, error)
	FirstOrCreate() (*rdm.SchedulerInstance, error)
	FindByPage(offset int, limit int) (result []*rdm.SchedulerInstance, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISchedulerInstanceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	DoHeartBeat(id int64, heartBeatAt time.Time) (rowsAffected int64, err error)
	PurgeInstance(id int64) (rowsAffected int64, err error)
	GetInstance(id int64) (result *rdm.SchedulerInstance, err error)
	ListOfflineInstances(id int64, oldestHeartBeatAt time.Time) (result []*rdm.SchedulerInstance, err error)
}

// update @@table
//
//	set heart_beat_at = @heartBeatAt
//	where id = @id
func (s schedulerInstanceDo) DoHeartBeat(id int64, heartBeatAt time.Time) (rowsAffected int64, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, heartBeatAt)
	params = append(params, id)
	generateSQL.WriteString("update scheduler_instance set heart_beat_at = ? where id = ? ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	rowsAffected = executeSQL.RowsAffected
	err = executeSQL.Error

	return
}

// delete from @@table where id = @id
func (s schedulerInstanceDo) PurgeInstance(id int64) (rowsAffected int64, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("delete from scheduler_instance where id = ? ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	rowsAffected = executeSQL.RowsAffected
	err = executeSQL.Error

	return
}

// select * from @@table
//
//	where id = id limit 1
func (s schedulerInstanceDo) GetInstance(id int64) (result *rdm.SchedulerInstance, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("select * from scheduler_instance where id = id limit 1 ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// select * from @@table
//
//	where id > @id and heart_beat_at < @oldestHeartBeatAt
//	order by id limit 20
func (s schedulerInstanceDo) ListOfflineInstances(id int64, oldestHeartBeatAt time.Time) (result []*rdm.SchedulerInstance, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	params = append(params, oldestHeartBeatAt)
	generateSQL.WriteString("select * from scheduler_instance where id > ? and heart_beat_at < ? order by id limit 20 ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s schedulerInstanceDo) Debug() ISchedulerInstanceDo {
	return s.withDO(s.DO.Debug())
}

func (s schedulerInstanceDo) WithContext(ctx context.Context) ISchedulerInstanceDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s schedulerInstanceDo) ReadDB() ISchedulerInstanceDo {
	return s.Clauses(dbresolver.Read)
}

func (s schedulerInstanceDo) WriteDB() ISchedulerInstanceDo {
	return s.Clauses(dbresolver.Write)
}

func (s schedulerInstanceDo) Session(config *gorm.Session) ISchedulerInstanceDo {
	return s.withDO(s.DO.Session(config))
}

func (s schedulerInstanceDo) Clauses(conds ...clause.Expression) ISchedulerInstanceDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s schedulerInstanceDo) Returning(value interface{}, columns ...string) ISchedulerInstanceDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s schedulerInstanceDo) Not(conds ...gen.Condition) ISchedulerInstanceDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s schedulerInstanceDo) Or(conds ...gen.Condition) ISchedulerInstanceDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s schedulerInstanceDo) Select(conds ...field.Expr) ISchedulerInstanceDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s schedulerInstanceDo) Where(conds ...gen.Condition) ISchedulerInstanceDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s schedulerInstanceDo) Order(conds ...field.Expr) ISchedulerInstanceDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s schedulerInstanceDo) Distinct(cols ...field.Expr) ISchedulerInstanceDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s schedulerInstanceDo) Omit(cols ...field.Expr) ISchedulerInstanceDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s schedulerInstanceDo) Join(table schema.Tabler, on ...field.Expr) ISchedulerInstanceDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s schedulerInstanceDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISchedulerInstanceDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s schedulerInstanceDo) RightJoin(table schema.Tabler, on ...field.Expr) ISchedulerInstanceDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s schedulerInstanceDo) Group(cols ...field.Expr) ISchedulerInstanceDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s schedulerInstanceDo) Having(conds ...gen.Condition) ISchedulerInstanceDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s schedulerInstanceDo) Limit(limit int) ISchedulerInstanceDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s schedulerInstanceDo) Offset(offset int) ISchedulerInstanceDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s schedulerInstanceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISchedulerInstanceDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s schedulerInstanceDo) Unscoped() ISchedulerInstanceDo {
	return s.withDO(s.DO.Unscoped())
}

func (s schedulerInstanceDo) Create(values ...*rdm.SchedulerInstance) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s schedulerInstanceDo) CreateInBatches(values []*rdm.SchedulerInstance, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s schedulerInstanceDo) Save(values ...*rdm.SchedulerInstance) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s schedulerInstanceDo) First() (*rdm.SchedulerInstance, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*rdm.SchedulerInstance), nil
	}
}

func (s schedulerInstanceDo) Take() (*rdm.SchedulerInstance, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*rdm.SchedulerInstance), nil
	}
}

func (s schedulerInstanceDo) Last() (*rdm.SchedulerInstance, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*rdm.SchedulerInstance), nil
	}
}

func (s schedulerInstanceDo) Find() ([]*rdm.SchedulerInstance, error) {
	result, err := s.DO.Find()
	return result.([]*rdm.SchedulerInstance), err
}

func (s schedulerInstanceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*rdm.SchedulerInstance, err error) {
	buf := make([]*rdm.SchedulerInstance, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s schedulerInstanceDo) FindInBatches(result *[]*rdm.SchedulerInstance, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s schedulerInstanceDo) Attrs(attrs ...field.AssignExpr) ISchedulerInstanceDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s schedulerInstanceDo) Assign(attrs ...field.AssignExpr) ISchedulerInstanceDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s schedulerInstanceDo) Joins(fields ...field.RelationField) ISchedulerInstanceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s schedulerInstanceDo) Preload(fields ...field.RelationField) ISchedulerInstanceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s schedulerInstanceDo) FirstOrInit() (*rdm.SchedulerInstance, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*rdm.SchedulerInstance), nil
	}
}

func (s schedulerInstanceDo) FirstOrCreate() (*rdm.SchedulerInstance, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*rdm.SchedulerInstance), nil
	}
}

func (s schedulerInstanceDo) FindByPage(offset int, limit int) (result []*rdm.SchedulerInstance, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s schedulerInstanceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s schedulerInstanceDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s schedulerInstanceDo) Delete(models ...*rdm.SchedulerInstance) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *schedulerInstanceDo) withDO(do gen.Dao) *schedulerInstanceDo {
	s.DO = *do.(*gen.DO)
	return s
}
